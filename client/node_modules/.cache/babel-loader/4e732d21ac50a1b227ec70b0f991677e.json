{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bunshy BOT\\\\Desktop\\\\Assignment3\\\\client\\\\src\\\\components\\\\Game.jsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport Card from './Card';\nimport User from './User';\nimport Waiting from './Waiting';\nimport './Game.css';\nimport { GameContext } from '../contexts/GameContext';\nimport { Link, Redirect, useLocation } from 'react-router-dom';\nimport GameFooter from './GameFooter';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst Game = () => {\n  const location = useLocation();\n  const query = new URLSearchParams(location.search);\n  const username = query.get('username');\n  const gameId = query.get('gameid');\n  const [clue, setClue] = useState('');\n  const [selectedCard, setSelectedCard] = useState(null);\n  const {\n    currentGame,\n    currentPlayer,\n    reconnectRoom,\n    storytellerChoose,\n    playerChoose,\n    playerVote,\n    startGame,\n    storytellerConfirm\n  } = useContext(GameContext);\n\n  const onSubmit = async () => {\n    if (player.currentRole === 'storyteller' && currentGame.state === 'storyteller') {\n      if (selectedCard !== null && clue !== '') {\n        storytellerChoose({\n          card: selectedCard,\n          clue,\n          gameId\n        });\n      }\n    }\n\n    if (player.currentRole === 'player' && currentGame.state === 'choosing') {\n      if (selectedCard !== null) {\n        playerChoose({\n          card: selectedCard,\n          username,\n          gameId\n        });\n      }\n    }\n\n    if (player.currentRole === 'player' && currentGame.state === 'voting') {\n      if (selectedCard !== null) {\n        playerVote({\n          card: selectedCard,\n          username,\n          gameId\n        });\n      }\n    }\n\n    if (player.currentRole === 'storyteller' && currentGame.state === 'votingEnd') {\n      storytellerConfirm({\n        gameId\n      });\n    }\n  };\n\n  useEffect(() => {\n    reconnectRoom({\n      username,\n      gameId\n    });\n  }, []);\n  if (!username || !gameId) return /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  });\n  console.log(currentGame);\n  if (!currentGame) return /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  });\n  const player = currentGame.players.find(player => player.username === username); // GAME PREP\n\n  let selectText = 'ERROR';\n\n  if (player.currentRole === 'storyteller') {\n    if (currentGame.state === 'storyteller') {\n      selectText = 'You are storyteller. Select one of your cards to play';\n    } else if (currentGame.state === 'voting' || currentGame.state === 'votingEnd') {\n      selectText = 'Players cards';\n    } else {\n      selectText = 'Your cards';\n    }\n  } else {\n    if (currentGame.state === 'choosing') {\n      selectText = 'You are player. Select one of your cards to play';\n    } else if (currentGame.state === 'voting' || currentGame.state === 'votingEnd') {\n      selectText = 'Players cards';\n    } else {\n      selectText = 'Your cards';\n    }\n  }\n\n  const cards = currentGame.state === 'voting' || currentGame.state === 'votingEnd' ? currentGame.votings : player.cards;\n  let cardVotes = null;\n  let storytellerCard = null;\n\n  if (currentGame.state === 'votingEnd') {\n    cardVotes = currentGame.players.map(player => 0);\n\n    for (let i in currentGame.players) {\n      if (currentGame.players[i].currentRole === 'storyteller') {\n        storytellerCard = currentGame.votings[i];\n      }\n\n      for (let j in currentGame.players) {\n        if (currentGame.players[j].chosenCard === currentGame.votings[i] && currentGame.players[j].currentRole !== 'storyteller') {\n          cardVotes[i] += 1;\n        }\n      }\n    }\n  }\n\n  let winner = null;\n\n  if (currentGame.winner !== null && currentGame.winner !== undefined) {\n    winner = currentGame.players[currentGame.winner];\n  } // END OF GAME PREP\n\n\n  if (currentGame.state === 'not started') return /*#__PURE__*/React.createElement(Waiting, {\n    numPlayers: currentGame.players.length,\n    isHost: player.isHost,\n    onStart: () => startGame(currentGame.gameId),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  });\n  if (currentGame.state === 'finished') return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"finished\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"finished-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Game Finished\"), /*#__PURE__*/React.createElement(User, {\n    isCurrent: true,\n    username: winner.username,\n    score: winner.score,\n    avatarSrc: winner.avatarSrc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"winner-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, \"Winner\"), /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    className: \"link-home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, \"Go to Home Page\"));\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"logo logo-small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"Dixit\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cards-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/images/card.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, \"x \", currentGame.cards.length)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"users-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, currentGame.players.map(user => /*#__PURE__*/React.createElement(User, {\n    key: user.username,\n    isCurrent: user.currentRole === 'storyteller',\n    username: user.username,\n    score: user.score,\n    avatarSrc: user.avatarSrc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 54\n    }\n  }))), currentGame.state === 'votingEnd' && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scores\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 55\n    }\n  }, currentGame.scores.map((score, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }\n  }, \"+\", score))), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"select-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, selectText), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cards-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, cards.map((card, i) => /*#__PURE__*/React.createElement(Card, {\n    onClick: () => {\n      if (currentGame.state === 'storyteller' && player.currentRole !== 'storyteller' || currentGame.state === 'votingEnd') {\n        return null;\n      }\n\n      if (selectedCard !== card) {\n        setSelectedCard(card);\n      } else {\n        setSelectedCard(null);\n      }\n    },\n    key: card,\n    card: card,\n    scaled: card === storytellerCard,\n    circleChar: currentGame.state === 'votingEnd' ? cardVotes[i] || '' : card === selectedCard && 'âœ“',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 45\n    }\n  }))), /*#__PURE__*/React.createElement(GameFooter, {\n    isStoryteller: player.currentRole === 'storyteller',\n    state: currentGame.state,\n    clue: clue,\n    setClue: setClue,\n    hasChosen: !!player.chosenCard,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }), currentGame.state !== 'storyteller' && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"clue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"clue-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, currentGame.clue))));\n};\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/Bunshy BOT/Desktop/Assignment3/client/src/components/Game.jsx"],"names":["React","useContext","useEffect","useState","Card","User","Waiting","GameContext","Link","Redirect","useLocation","GameFooter","LoadingSpinner","Game","location","query","URLSearchParams","search","username","get","gameId","clue","setClue","selectedCard","setSelectedCard","currentGame","currentPlayer","reconnectRoom","storytellerChoose","playerChoose","playerVote","startGame","storytellerConfirm","onSubmit","player","currentRole","state","card","console","log","players","find","selectText","cards","votings","cardVotes","storytellerCard","map","i","j","chosenCard","winner","undefined","length","isHost","score","avatarSrc","user","scores"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\r\nimport Card from './Card';\r\nimport User from './User';\r\nimport Waiting from './Waiting'\r\nimport './Game.css';\r\nimport { GameContext } from '../contexts/GameContext';\r\nimport { Link, Redirect, useLocation } from 'react-router-dom';\r\nimport GameFooter from './GameFooter';\r\nimport LoadingSpinner from './LoadingSpinner';\r\n\r\nconst Game = () => {\r\n    const location = useLocation();\r\n    const query = new URLSearchParams(location.search);\r\n    const username = query.get('username');\r\n    const gameId = query.get('gameid');\r\n\r\n    const [clue, setClue] = useState('');\r\n    const [selectedCard, setSelectedCard] = useState(null);\r\n    const { currentGame, currentPlayer, reconnectRoom,\r\n    storytellerChoose, playerChoose, playerVote, startGame, \r\n    storytellerConfirm } = useContext(GameContext);\r\n\r\n    const onSubmit = async () => {\r\n        if (player.currentRole === 'storyteller' && currentGame.state === 'storyteller') {\r\n            if (selectedCard !== null && clue !== '') {\r\n                storytellerChoose({ card: selectedCard, clue, gameId });\r\n            }\r\n        }\r\n        if (player.currentRole === 'player' && currentGame.state === 'choosing') {\r\n            if (selectedCard !== null) {\r\n                playerChoose({ card: selectedCard, username, gameId });\r\n            }\r\n        }\r\n        if (player.currentRole === 'player' && currentGame.state === 'voting') {\r\n            if (selectedCard !== null) {\r\n                playerVote({ card: selectedCard, username, gameId });\r\n            }\r\n        }\r\n        if (player.currentRole === 'storyteller' && currentGame.state === 'votingEnd') {\r\n            storytellerConfirm({ gameId });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        reconnectRoom({ username, gameId });\r\n    }, []);\r\n\r\n    if (!username || !gameId) return (\r\n        <Redirect to=\"/\" />\r\n    )\r\n    console.log(currentGame);\r\n    if (!currentGame) return (\r\n        <LoadingSpinner />\r\n    )\r\n    const player = currentGame.players\r\n    .find(player => player.username === username);\r\n    // GAME PREP\r\n    let selectText = 'ERROR';\r\n    if (player.currentRole === 'storyteller') {\r\n        if (currentGame.state === 'storyteller') {\r\n            selectText = 'You are storyteller. Select one of your cards to play';\r\n        }\r\n        else if (currentGame.state === 'voting' || currentGame.state === 'votingEnd') {\r\n            selectText = 'Players cards';\r\n        }\r\n        else {\r\n            selectText = 'Your cards';\r\n        }\r\n    } else {\r\n        if (currentGame.state === 'choosing') {\r\n            selectText = 'You are player. Select one of your cards to play';\r\n        }\r\n        else if (currentGame.state === 'voting' || currentGame.state === 'votingEnd') {\r\n            selectText = 'Players cards';\r\n        }\r\n        else {\r\n            selectText = 'Your cards';\r\n        }\r\n    }\r\n    const cards = (currentGame.state === 'voting' || currentGame.state === 'votingEnd') ?\r\n    currentGame.votings : player.cards;\r\n    let cardVotes = null;\r\n    let storytellerCard = null;\r\n    if (currentGame.state === 'votingEnd') {\r\n        cardVotes = currentGame.players.map(player => 0);\r\n        for (let i in currentGame.players) {\r\n            if (currentGame.players[i].currentRole === 'storyteller') {\r\n                storytellerCard = currentGame.votings[i];\r\n            }\r\n            for (let j in currentGame.players) {\r\n                if (currentGame.players[j].chosenCard === currentGame.votings[i]\r\n                    && currentGame.players[j].currentRole !== 'storyteller') {\r\n                    cardVotes[i] += 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let winner = null;\r\n    if (currentGame.winner !== null && currentGame.winner !== undefined) {\r\n        winner = currentGame.players[currentGame.winner];\r\n    }\r\n    // END OF GAME PREP\r\n    if (currentGame.state === 'not started') return (\r\n        <Waiting numPlayers={currentGame.players.length} isHost={player.isHost}\r\n        onStart={() => startGame(currentGame.gameId)}/>\r\n    )\r\n    if (currentGame.state === 'finished') return (\r\n        <div className=\"finished\">\r\n            <div className=\"finished-text\">\r\n                Game Finished\r\n            </div>\r\n            <User \r\n            isCurrent={true}\r\n            username={winner.username}\r\n            score={winner.score}\r\n            avatarSrc={winner.avatarSrc}/>\r\n            <div className=\"winner-text\">Winner</div>\r\n            <Link to=\"/\" className=\"link-home\">Go to Home Page</Link>\r\n        </div>\r\n    )\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"logo logo-small\">Dixit</div>\r\n            <div className=\"cards-left\">\r\n                <img src=\"/images/card.png\"/>\r\n                <div>x {currentGame.cards.length}</div>\r\n            </div>\r\n            <div className=\"game-main\">\r\n                <section className=\"users-section\">\r\n                    {currentGame.players.map(user => <User \r\n                    key={user.username}\r\n                    isCurrent={user.currentRole === 'storyteller'}\r\n                    username={user.username}\r\n                    score={user.score}\r\n                    avatarSrc={user.avatarSrc}/>)}\r\n                </section>\r\n                {currentGame.state === 'votingEnd' && <div className=\"scores\">\r\n                    {currentGame.scores.map((score, i) => \r\n                        <div className=\"score\" key={i}>\r\n                            +{score}\r\n                        </div>\r\n                    )}\r\n                </div>}\r\n                <label className=\"select-card\">{selectText}</label>\r\n                <div className=\"cards-list\">\r\n                    {cards.map((card, i) => <Card\r\n                    onClick={() => {\r\n                        if ((currentGame.state === 'storyteller' &&\r\n                        player.currentRole !== 'storyteller') || \r\n                        currentGame.state === 'votingEnd') {\r\n                            return null;\r\n                        }\r\n                        if (selectedCard !== card) {\r\n                            setSelectedCard(card);\r\n                        } else {\r\n                            setSelectedCard(null);\r\n                        }\r\n                    }}\r\n                    key={card}\r\n                    card={card} \r\n                    scaled={card === storytellerCard}\r\n                    circleChar={currentGame.state === 'votingEnd' ? \r\n                    cardVotes[i] || '' : card === selectedCard && 'âœ“'}\r\n                    />)}\r\n                </div>\r\n                <GameFooter \r\n                isStoryteller={player.currentRole === 'storyteller'}\r\n                state={currentGame.state} clue={clue}\r\n                setClue={setClue}\r\n                hasChosen={!!player.chosenCard}\r\n                onSubmit={onSubmit}/>\r\n                {currentGame.state !== 'storyteller' && <div className=\"clue\">\r\n                    <div className=\"clue-text\">\r\n                        {currentGame.clue}\r\n                    </div>\r\n                </div>}\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}