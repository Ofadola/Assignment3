{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bunshy BOT\\\\Desktop\\\\Assignment3\\\\client\\\\src\\\\contexts\\\\GameContext.jsx\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport '../socket';\nimport { disconnectSocket, isConnected, joinRoom, playerChoose, playerVote, reconnectRoom, startGame, storytellerChoose, storytellerConfirm, subscribeConnectEvent, subscribeErrorEvent, subscribeGameEvent, subscribeMessageEvent } from '../socket';\nexport const GameContext = createContext({\n  currentGame: {},\n  currentPlayer: {},\n  joinRoom: ({\n    player,\n    gameId,\n    isHost\n  }) => {},\n  startGame: () => {},\n  setPlayer: ({\n    player,\n    isHost\n  }) => {},\n  setGame: game => {},\n  storytellerChoose: ({\n    card,\n    clue,\n    gameId\n  }) => {},\n  storytellerConfirm: ({\n    gameId\n  }) => {},\n  playerChoose: ({\n    card,\n    username,\n    gameId\n  }) => {},\n  playerVote: ({\n    card,\n    username,\n    gameId\n  }) => {},\n  reconnectRoom: ({\n    username,\n    gameId\n  }) => {}\n});\nexport const GameProvider = ({\n  children\n}) => {\n  const [currentGame, setCurrentGame] = useState(null);\n  const [currentPlayer, setCurrentPlayer] = useState(null);\n  const [loading, setLoading] = useState(!isConnected());\n  console.log('LOADING ' + loading);\n  useEffect(() => {\n    subscribeConnectEvent(() => {\n      console.log('Connected');\n      setLoading(false);\n    });\n    subscribeMessageEvent(msg => {\n      if (msg === 'welcome') {\n        console.log(msg);\n        setLoading(false);\n      } else {\n        console.log(msg);\n      }\n    });\n    subscribeErrorEvent(err => console.log(err));\n    subscribeGameEvent(game => {\n      console.log('GAME OBJECT RECEIVED');\n      console.log(game);\n      setCurrentGame(game);\n    });\n    return () => disconnectSocket();\n  }, []);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(GameContext.Provider, {\n    value: {\n      currentGame,\n      currentPlayer,\n      joinRoom,\n      setPlayer: setCurrentPlayer,\n      setGame: setCurrentGame,\n      reconnectRoom,\n      storytellerChoose: storytellerChoose,\n      storytellerConfirm: storytellerConfirm,\n      playerVote: playerVote,\n      playerChoose: playerChoose,\n      startGame: startGame\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, children);\n};\nexport default GameProvider;","map":{"version":3,"sources":["C:/Users/Bunshy BOT/Desktop/Assignment3/client/src/contexts/GameContext.jsx"],"names":["React","createContext","useEffect","useState","useHistory","LoadingSpinner","disconnectSocket","isConnected","joinRoom","playerChoose","playerVote","reconnectRoom","startGame","storytellerChoose","storytellerConfirm","subscribeConnectEvent","subscribeErrorEvent","subscribeGameEvent","subscribeMessageEvent","GameContext","currentGame","currentPlayer","player","gameId","isHost","setPlayer","setGame","game","card","clue","username","GameProvider","children","setCurrentGame","setCurrentPlayer","loading","setLoading","console","log","msg","err"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport '../socket';\r\nimport { disconnectSocket, isConnected, joinRoom, playerChoose, playerVote, reconnectRoom, startGame, storytellerChoose, storytellerConfirm, subscribeConnectEvent, \r\n    subscribeErrorEvent, subscribeGameEvent, subscribeMessageEvent } from '../socket';\r\n\r\nexport const GameContext = createContext({\r\n    currentGame: {},\r\n    currentPlayer: {},\r\n    joinRoom: ({ player, gameId, isHost }) => {},\r\n    startGame: () => {},\r\n    setPlayer: ({ player, isHost }) => {},\r\n    setGame: (game) => {},\r\n    storytellerChoose: ({ card, clue, gameId }) => {},\r\n    storytellerConfirm: ({ gameId }) => {},\r\n    playerChoose: ({ card, username, gameId }) => {},\r\n    playerVote: ({ card, username, gameId }) => {},\r\n    reconnectRoom: ({ username, gameId }) => {},\r\n});\r\n\r\nexport const GameProvider = ({ children }) => {\r\n    const [currentGame, setCurrentGame] = useState(null);\r\n    const [currentPlayer, setCurrentPlayer] = useState(null);\r\n    const [loading, setLoading] = useState(!isConnected());\r\n    console.log('LOADING ' + loading);\r\n\r\n    useEffect(() => {\r\n        subscribeConnectEvent(() => {\r\n            console.log('Connected');\r\n            setLoading(false);\r\n        })\r\n        subscribeMessageEvent(msg => {\r\n            if (msg === 'welcome') {\r\n                console.log(msg);\r\n                setLoading(false);\r\n            } else {\r\n                console.log(msg);\r\n            }\r\n        });\r\n        subscribeErrorEvent(err => console.log(err));\r\n        subscribeGameEvent(game => {\r\n            console.log('GAME OBJECT RECEIVED');\r\n            console.log(game);\r\n            setCurrentGame(game);\r\n        })\r\n        return () => disconnectSocket();\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return (\r\n            <LoadingSpinner />\r\n        )\r\n    }\r\n    return (\r\n        <GameContext.Provider value={{\r\n            currentGame,\r\n            currentPlayer,\r\n            joinRoom,\r\n            setPlayer: setCurrentPlayer,\r\n            setGame: setCurrentGame,\r\n            reconnectRoom,\r\n            storytellerChoose: storytellerChoose,\r\n            storytellerConfirm: storytellerConfirm,\r\n            playerVote: playerVote,\r\n            playerChoose: playerChoose,\r\n            startGame: startGame,\r\n        }}>\r\n            {children}\r\n        </GameContext.Provider>\r\n    )\r\n}\r\n\r\nexport default GameProvider;"]},"metadata":{},"sourceType":"module"}